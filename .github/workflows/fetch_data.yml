name: Fetch Boat Race Data (JST対応・スマート再試行版)

on:
  schedule:
    # 毎日 日本時間 朝7:00 に自動実行（UTC 22:00）
    - cron: "0 22 * * *"
  workflow_dispatch:  # 手動実行対応

jobs:
  fetch:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml pytz

      # ▼ スマート再試行関数定義
      - name: Define retry function
        run: |
          echo '#!/bin/bash' > retry.sh
          echo 'set -e' >> retry.sh
          echo 'cmd="$1"' >> retry.sh
          echo 'max_attempts=${2:-3}' >> retry.sh
          echo 'wait_seconds=${3:-900}' >> retry.sh
          echo 'attempt=1' >> retry.sh
          echo 'while true; do' >> retry.sh
          echo '  echo "🔄 Attempt $attempt/$max_attempts: $cmd"' >> retry.sh
          echo '  if eval "$cmd"; then' >> retry.sh
          echo '    echo "✅ 成功しました。"' >> retry.sh
          echo '    break' >> retry.sh
          echo '  fi' >> retry.sh
          echo '  if [ $attempt -ge $max_attempts ]; then' >> retry.sh
          echo '    echo "❌ 最大試行回数に達しました。終了します。"' >> retry.sh
          echo '    exit 1' >> retry.sh
          echo '  fi' >> retry.sh
          echo '  attempt=$((attempt+1))' >> retry.sh
          echo '  echo "⏳ ${wait_seconds}秒後に再試行..."' >> retry.sh
          echo '  sleep $wait_seconds' >> retry.sh
          echo 'done' >> retry.sh
          chmod +x retry.sh

      # ▼ 出走表データの取得（最大3回・15分間隔）
      - name: Fetch Program (出走表・スマート再試行)
        run: |
          ./retry.sh "python fetch_data.py --force-program" 3 900

      # ▼ 結果データの取得（最大3回・15分間隔）
      - name: Fetch Result (結果・スマート再試行)
        run: |
          ./retry.sh "python fetch_data.py --force-result" 3 900

      # ▼ data.json の内容を確認
      - name: Show data.json preview
        run: |
          echo "=== data.json preview (first 50 lines) ==="
          head -n 50 data.json || echo "data.json not found"

      # ▼ 変更があればコミット＆プッシュ
      - name: Commit and push if changed
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add data.json
          if git diff --cached --quiet; then
            echo "✅ No changes detected — skipping commit."
          else
            git commit -m "Update data.json (Auto JST fetch with retry)"
            git push
            echo "🚀 Changes pushed to main."
          fi